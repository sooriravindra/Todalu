(def t (eq? 1 1))
(def nil (eq? 1 0))
(def and (lambda (x y) (if x (if y t nil) nil)))
(def or (lambda (x y) (if x t (if y t nil))))
(def not (lambda x (if x nil t)))
(def < (lambda (x y) (> y x)))
(def <= (lambda (x y) (not (> x y))))
(def >= (lambda (x y) (not (< x y))))
(def empty? (lambda x (if (not (list? x)) #fail (if x nil t))))
(def map (lambda (fn in) (if (not (list? in)) #fail  (if (empty? in) in (cons (fn (car in)) (map fn (cdr in)))))))
(def filter (lambda (fn in) (if (not (list? in)) #fail  (if (empty? in) in (if (fn (car in)) (cons (car in) (filter fn (cdr in))) (filter fn (cdr in)))))))
